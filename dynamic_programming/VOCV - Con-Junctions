#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;

typedef pair<int,int> pii;
typedef long long ll;


const int N = 1e5+12;
const int mod = 1e4+7;

vector<int> g[N];
int dp[N][2], cnt[N][2];


void dfs(int  curr,int p)
{
	dp[curr][0]=0;
	dp[curr][1]=1;
	
	cnt[curr][0]=1;
	cnt[curr][1]=1;
	
	
	
	for(auto child:g[curr])
	{
		if(child==p) continue;
		dfs(child,curr);
		
		dp[curr][1]+=min(dp[child][1],dp[child][0]);
		dp[curr][0]+=dp[child][1];
		

		// update ways
		if(dp[child][0]==dp[child][1])
		{
			cnt[curr][1]*=(cnt[child][0]+cnt[child][1]);
			cnt[curr][1]%=mod;
		}
		else if(dp[child][0]<dp[child][1])
		{
			cnt[curr][1]*=cnt[child][0];
			cnt[curr][1]%=mod;
		}
		else
		{
			cnt[curr][1]*=cnt[child][1];
			cnt[curr][1]%=mod;	
		}
		
		cnt[curr][0]*=cnt[child][1];
		cnt[curr][0]%=mod;
		
	}
	
}


int main() {

  ios::sync_with_stdio(false);	
  cin.tie(NULL);
  int t;
  cin >> t;
 
  while(t--) 
  {
    	int n; cin >> n;
    	for(int i = 1 ; i < n; i++) {
    		int a, b;
    		cin >> a >> b;
    		g[a].push_back(b);
    		g[b].push_back(a);
    	}
        dfs(1,-1);
    	cout<<min(dp[1][0],dp[1][1])<<" ";
    	
    	if(dp[1][0]==dp[1][1]) cout<<(cnt[1][0]+cnt[1][1])%mod<<endl;
    	else if(dp[1][0]<dp[1][1]) cout<<cnt[1][0]<<endl;
    	else cout<<cnt[1][1]<<endl;
    
    	for(int i=0;i<=n;i++) g[i].clear();
    }
    return 0;
}
