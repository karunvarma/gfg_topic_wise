#include<bits/stdc++.h>
using namespace std;
#define faster cin.tie(0);ios_base::sync_with_stdio(0)
#define ll long long

typedef pair<ll,ll> pii;

const int mx=1e5+10;
vector<pii> g[mx];

int n,k;
ll src,des,via;
int par[mx];


void dijkstra(ll source,ll *dist,bool *vis,vector<pii> adj[])
{
    for(int i=0;i<=n;i++)
    {
        vis[i]=false;
        dist[i]=LONG_MAX;
    }

    // min heap
    priority_queue<pii,vector<pii>,greater<pii> >pq;
    pq.push(make_pair(0,source));
    dist[source]=0;
    
    while(!pq.empty())
    {
        pii p=pq.top();
        pq.pop();
        int u =(int) p.second;
        if(vis[u]) continue;

        vis[u]=true;

        for(int i=0;i<adj[u].size();i++)
        {
            int v=(int) ( adj[u][i].first ) ;
            int weight = (int) ( adj[u][i].second ) ;

            if(dist[v]>dist[u]+weight)
            {
                par[v]=u;
                dist[v]=dist[u]+weight;
                pq.push(make_pair(dist[v],v));
            }
        }
    }	
}

void cleanup()
{
    for(int i=0;i<=n;i++) g[i].clear();  
}


void storePath(int curr,vector<int>&path)
{
        while(curr!=-1)
        {
            path.push_back(curr);
            curr=par[curr];
        }

}


int main()
{
    faster;

    int t;
    cin>>t;

    while(t--)
    {

        cleanup();

        cin>>n>>k;

        // graph construction
        for(int i=1;i<=k;i++)
        {
            int u,v,w;
            cin>>u>>v>>w;
            g[u].push_back({v,w});
            g[v].push_back({u,w});
        }

        cin>>src>>via>>des;

        // vis vector
        // dist array
        bool vis[n+1];
        ll dist[n+1];
        vector<int> path1,path2;
        
        memset(par,-1,sizeof(par));
        dijkstra(src,dist,vis,g);


        ll ans=0;

        if(dist[via]==LONG_MAX)
        {
            cout<<"No Train Found."<<endl;
            continue;
        }
        else ans+=dist[via];
        storePath(via,path1);
        reverse(path1.begin(),path1.end());


        memset(par,-1,sizeof(par));
        dijkstra(via,dist,vis,g);


        if(dist[des]==LONG_MAX)
        {
            cout<<"No Train Found."<<endl;
            continue;
        }
        else ans+=dist[des];
        storePath(des,path2);
        reverse(path2.begin(),path2.end());
       

        cout<<ans<<endl;

        for(int i=0;i<path1.size();i++) cout<<path1[i]<<" ";
        for(int i=1;i<path2.size();i++) cout<<path2[i]<<" ";
       
        cout<<endl;

      
        

    }


    return 0;
}
