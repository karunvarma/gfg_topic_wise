void dijkstra(ll source,ll *dist,bool *vis,vector<pii> adj[])
{
	for(int i=0;i<=n;i++)
    {
        vis[i]=false;
        dist[i]=LONG_MAX;
    }
    
    
    // min heap
    priority_queue<pii,vector<pii>,greater<pii> >pq;
    pq.push(make_pair(0,source));
    dist[source]=0;
    
    while(!pq.empty())
    {
        pii p=pq.top();
        pq.pop();
        int u =(int) p.second;
        if(vis[u]) continue;

        vis[u]=true;

        for(int i=0;i<adj[u].size();i++)
        {
            int v=(int) ( adj[u][i].first ) ;
            int weight = (int) ( adj[u][i].second ) ;

            if(dist[v]>dist[u]+weight)
            {
                dist[v]=dist[u]+weight;
                pq.push(make_pair(dist[v],v));
            }
        }
    }	
}
