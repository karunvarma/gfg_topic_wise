/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
 int  common(ListNode* l1,ListNode* l2)
 {
     
     int cnt=0;
     while(l1 and l2)
     {
         if(l1->val==l2->val) cnt++;
         else break;
         
         l1=l1->next;
         l2=l2->next;
         
     }
     return cnt;
 }
 
 
int largestP(ListNode* head)
{
    int ans=0;
    ListNode* prev=NULL;
    ListNode* curr=head;
    
    
    // prev <- curr| next->
    
    while(curr)
    {
        ListNode* next=curr->next;
        curr->next=prev;
        
        // odd
        ans=max(ans,2*common(next,prev)+1);
        
        // even
        ans=max(ans,2*common(next,curr));
        
        prev=curr;
        curr=next;
    }
    
    return ans;
}
 
int Solution::solve(ListNode* A) {
    return largestP(A);
}
