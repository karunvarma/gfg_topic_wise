/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* curr=head;
        
        // creating copy nodes
        while(curr)
        {
            Node* temp=curr->next;
            curr->next= new Node(curr->val);
            curr->next->next=temp;
            curr=temp;
           
        }
        
         
        //
        curr=head;
        while(curr)
        {
            // update the next node random pointer with current random
            if(curr->next) curr->next->random=(curr->random)?curr->random->next:curr->random;
                
            // skip 2 elemets
            curr=curr->next?curr->next->next:curr->next;
    
        }
        
       
        
        Node* original=head;
        Node* clone=head?head->next:head;
        
        Node* copy=clone;
    
        while(original && copy)
        {
            original->next=(original->next)?original->next->next:original->next;
            copy->next=(copy->next)?copy->next->next:copy->next;
            original=original->next;
            copy=copy->next;
        }
    
        return clone;
    }
};
