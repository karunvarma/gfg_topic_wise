#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;

typedef pair<int,int> pii;
typedef long long ll;


// const values according to problems
const int MAXN=450010;
const int LOGN=20;

vector<int> graph[MAXN];
int sparse[MAXN][LOGN];
int level[MAXN];
bitset<255> ans[MAXN];
int color[MAXN];


// no of nodes
int n,q,root;

int lca_query(int u,int v)
{
	if(level[u]<level[v]) swap(u,v);
	int diff=level[u]-level[v];
	

	for(int i=0;i<LOGN;i++)
	{
		if((1<<i) & diff)
		{
			u=sparse[u][i];
		}
	}

	if(u==v) 
	{
			return u;
	}
	for(int i=LOGN-1;i>=0;i--)
	{
		if(sparse[u][i]!=sparse[v][i])
		{
			u=sparse[u][i];
			v=sparse[v][i];
		}
	}
	
	return sparse[u][0];
}


void dfs(int curr,int parent,int lvl)
{
	sparse[curr][0]=parent;
	level[curr]=lvl;
	ans[curr][color[curr]]=1;
	
	// filling the sparse table while traversing
	for(int i=1;i<LOGN;i++)
	{
		int prev=sparse[curr][i-1];
		
		// check if half exist
		if(prev!=-1)
		{
			// if 2^(i-1) parent exist
			sparse[curr][i]=sparse[prev][i-1];
		}
		else break;
	}
	
	for(auto adj:graph[curr])
	{
		int child=adj;
		if(child==parent) continue;
		dfs(adj,curr,lvl+1);
		
		// set the bits based on child bits;
		ans[curr]|=ans[adj];
	}
}






int main()
{
	fast;
	int tc; cin>>tc;
	while(tc--)
	{
		
		cin>>n>>q>>root;
		
		for(int i=0;i<=n;i++)
		{
			graph[i].clear();
			ans[i].reset();
		}
		
		for(int i=0;i<n;i++)
		{
			cin>>color[i];
		}
		
		for(int i=0;i<n-1;i++)
		{
			int u,v; cin>>u>>v;
			graph[u].push_back(v);
			graph[v].push_back(u);
		}
		
		memset(sparse,-1,sizeof(sparse));

		// calculate level and fill sparse talble using dfs
		dfs(root,-1,1);
		
		while(q--)
		{
			int u,v; 
			cin>>u>>v;
			
			int lca=lca_query(u,v);
			cout<<ans[lca].count()<<endl;
		}
		//cout<<endl;
	}
	return 0;	
}
