#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;

typedef pair<int,int> pii;
typedef long long ll;


// const values according to problems
const int MAXN=100005;
const int LOGN=20;

vector<pii> graph[MAXN];
int sparse[MAXN][LOGN];
int max_sparse[MAXN][LOGN];
int min_sparse[MAXN][LOGN];
int level[MAXN];


// no of nodes
int N; 

void lca_query(int u,int v)
{
	if(level[u]<level[v]) swap(u,v);
	int diff=level[u]-level[v];
	
	int maxAns = INT_MIN;
	int minAns = INT_MAX;

	for(int i=0;i<LOGN;i++)
	{
		if((1<<i) & diff)
		{
			maxAns=max(maxAns,max_sparse[u][i]);
			minAns=min(minAns,min_sparse[u][i]);
			u=sparse[u][i];
		}
	}

	if(u==v) 
	{
			cout<<minAns<<" "<<maxAns<<endl;	
			return;
	}
	for(int i=LOGN-1;i>=0;i--)
	{
		if(sparse[u][i]!=sparse[v][i])
		{
			
			maxAns=max(maxAns,max(max_sparse[v][i],max_sparse[u][i]));
			minAns=min(minAns,min(min_sparse[v][i],min_sparse[u][i]));
			
			u=sparse[u][i];
			v=sparse[v][i];
		}
	}
	
	maxAns=max(maxAns,max(max_sparse[v][0],max_sparse[u][0]));
	minAns=min(minAns,min(min_sparse[v][0],min_sparse[u][0]));
	cout<<minAns<<" "<<maxAns<<endl;
}


void dfs(int curr,int parent,int lvl,int cost)
{
	// fixing the 2^0 th parent 
	sparse[curr][0]=parent;
	
	if(parent!=-1)
	{
		max_sparse[curr][0]=cost;
		min_sparse[curr][0]=cost;
	}
	else
	{
		max_sparse[curr][0]=INT_MIN;
		min_sparse[curr][0]=INT_MAX;
	}

	// set the level for the current node
	level[curr]=lvl;
	
	
	// filling the sparse table while traversing
	for(int i=1;i<LOGN;i++)
	{
		int prev=sparse[curr][i-1];
		
		// check if half exist
		if(prev!=-1)
		{
			// if 2^(i-1) parent exist
			sparse[curr][i]=sparse[prev][i-1];
			
			// if prev value is good or current value 
			if(sparse[curr][i]!=-1)
			{
				max_sparse[curr][i]=max(max_sparse[curr][i-1],max_sparse[prev][i-1]);
				min_sparse[curr][i]=min(min_sparse[curr][i-1],min_sparse[prev][i-1]);
			}
		}
		else break;
	}
	
	for(auto adj:graph[curr])
	{
	
		int child=adj.first;
		int cost=adj.second;
		
		if(child==parent) continue;
		
		dfs(adj.first,curr,lvl+1,cost);
	}
}






int main()
{
	fast;
	int tc; tc=1;
	while(tc--)
	{
		cin>>N;
		
		for(int i=0;i<N-1;i++)
		{
			int u,v,w; cin>>u>>v>>w;
			graph[u].push_back({v,w});
			graph[v].push_back({u,w});
		}
		
		
		memset(sparse,-1,sizeof(sparse));

		// calculate level and fill sparse talble using dfs
		dfs(1,-1,1,0);
	
		int k; cin>>k;
		while(k--)
		{
			int u,v; cin>>u>>v;
			lca_query(u,v);
		
		}
		
	}
	return 0;	
}
